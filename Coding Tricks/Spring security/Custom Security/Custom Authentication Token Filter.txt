package com.mfg.quality.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.mfg.quality.authentication.AuthenticationService;
import com.mfg.quality.cache.TokenCacheService;
/**
 * @author Shashikant Sharma.
 * @since 12/04/2016
 */
@Component
public class CustomAuthenticationTokenFilter extends OncePerRequestFilter {

	private static final Logger logger = Logger.getLogger(CustomAuthenticationTokenFilter.class);

    @Autowired
    private UserDetailsService userDetailsService;

   // @Autowired
   // private JwtTokenUtil jwtTokenUtil;

    @Value("token")
    private String tokenHeader;
    
    @Autowired
    AuthenticationService authenticationService;
    
    @Autowired
    TokenCacheService tokenCacheService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException {
    	String authToken = request.getHeader(this.tokenHeader);
    	String username=null;
    	if(authToken!=null){
           try {
			username = (String)tokenCacheService.getCacheObject(authToken);
		  } catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		  } 
    	}
        if (username != null) {

            // It is not compelling necessary to load the use details from the database. You could also store the information
            // in the token and read it from it. It's up to you ;)
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            logger.info("authenticated user " + username + ", setting security context");
            SecurityContextHolder.getContext().setAuthentication(authentication);
            
        }

        chain.doFilter(request, response);
    
    }
}